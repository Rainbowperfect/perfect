import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.collections.CollectionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.orbitz.apache.commons.lang3.StringUtils;


@Controller
@RequestMapping("/task")
public class TaskController extends BaseController
{
    
    private static final Logger log = LoggerFactory.getLogger(TaskController.class);
    
    @Autowired
    private TaskService taskService;
    
    @Autowired
    private ProjectService projectService;
    
    @Autowired
    private TermService termService;
    
    
    @GetMapping(value = "/query/page")
    @ResponseBody
    public BaseResponseMsg queryMyTask(HttpServletRequest request, Integer limit, Integer offset)
    {
        
        BaseResponseMsg msg = new BaseResponseMsg();
        ResponseHead head = new ResponseHead();
        TaskResponseBody body = new TaskResponseBody();
        msg.setHead(head);
        msg.setBody(body);
        
        String sysUid = getSysuid(request);
        int total = 0;
        try
        {
            total = taskService.getMyTaskCount("1", sysUid);
            if (total <= 0)
            {
                head.setFlag(true);
                body.setTotal(0);
                return msg;
            }
        }
        catch (ServiceException e)
        {
            CodeCCUtils.errorLog(log, "taskService.getMyTaskCount failed", e);
            head.setFlag(false);
            head.setErrorcode(ErrorCodeConstant.ERROR_CODE_INTERNALEXCEPTION);
        }
        
        List<TaskEx> taskList = null;
        try
        {
            taskList = taskService.getMyTask("1", sysUid, offset, limit);
        }
        catch (ServiceException e)
        {
            CodeCCUtils.errorLog(log, "taskService.getMyTask failed", e);
            head.setFlag(false);
            head.setErrorcode(ErrorCodeConstant.ERROR_CODE_INTERNALEXCEPTION);
            return msg;
        }
        if (CollectionUtils.isEmpty(taskList))
        {
            head.setFlag(false);
            head.setErrorcode(ErrorCodeConstant.ERROR_CODE_INTERNALEXCEPTION);
            return msg;
        }
        
        Map<String,String> projectNameMap = new HashMap<>();
        Map<String,String> projectIdMap = new HashMap<>();
        packageData(taskList,projectNameMap,projectIdMap);
        
        head.setFlag(true);
        body.setProjectIdMap(projectIdMap);
        body.setProjectNameMap(projectNameMap);
        body.setTaskList(taskList);
        body.setTotal(total);
        return msg;
    }
    
    private void packageData(List<TaskEx> taskList,Map<String,String> projectNameMap,Map<String,String> projectIdMap)
    {
        List<String> taskIdList = new ArrayList<>();
        Set<String> sysUidSet = new HashSet<>();
        
        for (TaskEx task : taskList)
        {
            taskIdList.add(task.getTaskId());
            
            String owner = task.getOwner();
            String[] ownerList = owner.split(";");
            
            sysUidSet.addAll(Arrays.asList(ownerList));
            
        }
        
        Map<String,String> ownerMap = new HashMap<>(); 
        Map<String,String> termMap = new HashMap<>();

        packageProjectName(taskIdList,projectNameMap,projectIdMap);
        packageAuthor(sysUidSet,ownerMap);
        getTermMap(taskIdList,CommonConstant.PROJECT_TASKTYPE,termMap);
        for(TaskEx task : taskList)
        {
            StringBuffer sb = new StringBuffer();
            String owner = task.getOwner();
            String[] ownerArr = owner.split(";");
            for(String tmp : ownerArr)
            {
                String uid = ownerMap.get(tmp);
                if(!StringUtils.isBlank(uid))
                {                    
                    sb.append(ownerMap.get(tmp)).append(";");
                }
                
            }
            task.setOwnerUser(sb.length() > 0 ?sb.substring(0, sb.length()-1) : task.getOwner());
            
            
            task.setTaskType(termMap.get(task.getTaskType()));
        }
        
        
    }
    
    
    private void packageProjectName(List<String> taskIdList, Map<String,String> projectNameMap,Map<String,String> projectIdMap)
    {
        for(String taskId : taskIdList)
        {
            try
            {
                Project project = projectService.getProjectBasicByTaskId(taskId);
                
                if(project != null)
                {
                    projectNameMap.put(taskId, project.getName());
                    projectIdMap.put(taskId, project.getPid());
                }
            }
            catch (ServiceException e)
            {
                CodeCCUtils.errorLog(log, "projectService.getProjectBasicByTaskId failed", e);
                continue;
            }
        }
    }
    private void packageAuthor(Set<String> sysUidSet,Map<String,String> ownerMap)
    {
        
        List<String> sysUidList = new ArrayList<>(sysUidSet);
        List<String> userIdList = null;
        try
        {
            userIdList = UserConversionUtil.transSysUidToUserId(sysUidList);
        }
        catch (Exception e)
        {
            CodeCCUtils.errorLog(log, "UserConversionUtil.transSysUidToUserId failed", e);
            return;
        }
        for(int i = 0; i < userIdList.size(); i++)
        {
            ownerMap.put(sysUidList.get(i), userIdList.get(i));
        }
    }
    
    private void getTermMap(List<String> taskIdList,String termId,Map<String,String> termMap)
    {
        List<Term> termList = null;
        try
        {
            termList = termService.getSubterms(termId);
        }
        catch (ServiceException e)
        {
            CodeCCUtils.errorLog(log, "termService.getSubterms('PROJECT-TYPE') failed", e);
            return;
        }
        
        if(CollectionUtils.isEmpty(termList))
        {
            return;
        }
        
        for(Term term : termList)
        {
            termMap.put(term.getId(), term.getAttributes().get("ZH"));
        }
    }
    
    
}
<template>
    <div class = "overview">
        <div class = "doc_write">
            <div class = "doc_write_task">
                <p class = "title_p">我的待办</p>
                <div  class="lable">
                    <span class="lable_document" @click="isdocument=true" v-bind:class="{'active':isdocument}">文档</span>
                    <span class="lable_failuremode" @click="isdocument=false" v-bind:class="{'active':!isdocument}">故障模式</span>
                </div>    
                <div class = "docTaskWait" v-if="isdocument">
                    <div class = "fold"  @click = "showWrite = !showWrite;showApproval=false" v-bind:class="{'rotate':!showWrite}">
                        <img src="../../assets/xdesigner/unfold.png"></img>
                        <p>设计任务</p>
                        <span class = "count">{{total}}</span>
                    </div>
                    <div class="task_table table" v-show="showWrite">
                        <el-table
                            :data="taskList"
                            ref="multipleTable"
                            style="width: 100%"
                            empty-text=" "
                            border
                            max-height="632">
                            <el-table-column
                              label="任务名称">
                              <template slot-scope="scope">
                                 <el-popover trigger="hover" placement="right-end">
                                    <p> {{ scope.row.taskName }}</p>
                                    <div slot="reference" class="name-wrapper">
                                        <!--<span @click="viewDoc(scope.row)">-->
                                        <!--跳转入在线写作页面-->
                                        <span><a  :href="taskUrl + scope.row.taskId" target="_blank">{{ scope.row.taskName }}</a></span>
                                        
                                    </div>
                                </el-popover>
                              </template>
                            </el-table-column>
                            <el-table-column
                                label="所属项目">
                                <template slot-scope="scope">
                                    <el-popover trigger="hover" placement="right-end">
                                        <p>{{ projectNameMap[scope.row.taskId]}}</p>
                                        <div slot="reference" class="name-wrapper">
                                            <span>
                                                <a :href="'/project/detail/' + projectIdMap[scope.row.taskId]">{{projectNameMap[scope.row.taskId]}}</a>
                                            </span>
                                        </div>
                                    </el-popover>
                                </template>
                            </el-table-column>
                            <el-table-column
                                label="交付件名称">
                                <template slot-scope="scope">
                                    <el-popover trigger="hover" placement="right-end">
                                        <p>{{ scope.row.deliverableName}}</p>
                                        <div slot="reference" class="name-wrapper">
                                            <span>
                                                <a :href="deliverableUrl + scope.row.deliverableId + '?status=' + scope.row.deliverableStatus" target="_blank">{{scope.row.deliverableName}}</a>
                                            </span>
                                            
                                        </div>
                                    </el-popover>
                                </template>
                            </el-table-column>
                            <el-table-column
                                label="任务类型">
                                <template slot-scope="scope">
                                    <el-popover trigger="hover" placement="right-end">
                                        <p>{{ scope.row.taskType}}</p>
                                        <div slot="reference" class="name-wrapper">
                                            <span>{{ scope.row.taskType}}</span>
                                        </div>
                                    </el-popover>
                                </template>
                            </el-table-column>
                            <el-table-column
                                label="作者列表">
                                <template slot-scope="scope">  
                                    <el-popover trigger="hover" placement="right-end">
                                        <p>{{ scope.row.ownerCommonName}}</p>
                                        <div slot="reference" class="name-wrapper">
                                            <span>{{ scope.row.ownerCommonName}}</span>
                                        </div>
                                    </el-popover>
                                </template>
                            </el-table-column>
                            <el-table-column
                                label="计划完成时间">
                                <template slot-scope="scope">  
                                    {{ scope.row.finishTime | onlyDay }}
                                </template>
                            </el-table-column>
                           
                        </el-table>
                        <pagination :total="total" :pageItem="pageItem"  @pagechange = "pageChange"  ref = "pag" ></pagination>
                    </div>

                    <!--表单切换的叶签-->
                    <div class="search_div" >
                            <div class="btnBox">
                                <button v-bind:class="[!toggleViewShow?'unfinishTaskBtn':'historyRecordBtn']" @click="historyRecord">历史记录</button>
                                <button v-bind:class="[toggleViewShow?'unfinishTaskBtn':'historyRecordBtn']" @click="currentTasks">当前待办</button>
                            </div>
                    </div>

           <div class="currentTasks" v-if="toggleViewShow">
                    <div class = "fold"  @click = "showApproval = !showApproval;showWrite=false" v-bind:class="{'rotate':!showApproval}">
                        <img src="../../assets/xdesigner/unfold.png"></img>
                        <p>审批任务</p>
                        <span class = "count">{{approvalTotal}}</span>
                    </div>
                    <div class="task_table table" v-show="showApproval">
                        <el-table
                            :data="approvalList"
                            ref="multipleTable"
                            style="width: 100%"
                            empty-text=" "
                            border
                            max-height="632">
                            <el-table-column
                              label="任务编号" width='200'>
                              <template slot-scope="scope" >
                                    <span><a  :href="scope.row.checkUrl" target="_blank">{{scope.row.businessKey}}</a></span> 
                              </template>
                            </el-table-column>
                            <el-table-column
                              label="任务名称">
                              <template slot-scope="scope">
                                 <el-popover trigger="hover" placement="right-end">
                                    <p> {{ scope.row.taskName }}</p>
                                    <div slot="reference" class="name-wrapper">
                                        <span>{{scope.row.taskName}}</span> 
                                    </div>
                                </el-popover>
                              </template>
                            </el-table-column>

                            <el-table-column
                                label="任务状态" width='100'>
                                <template slot-scope="scope">
                                    <span>{{(scope.row.status,scope.row.statusType) | statusType(scope.row.status,scope.row.statusType)}}</span>
                                </template>
                            </el-table-column>

                            <el-table-column
                                label="任务审批类型" width='150'>
                                <template slot-scope="scope">
                                    <span>{{scope.row.taskType}}</span>
                                </template>
                            </el-table-column>

                            <el-table-column
                                label="提交人">
                                <template slot-scope="scope">
                                    <el-popover trigger="hover" placement="right-end">
                                        <p>{{ scope.row.initiator}}</p>
                                        <div slot="reference" class="name-wrapper">
                                            <span>
                                                {{ scope.row.initiator}}
                                            </span>
                                        </div>
                                    </el-popover>
                                </template>
                            </el-table-column>
                            <el-table-column
                                label="提交时间" width='100'>
                                <template slot-scope="scope">
                                    <span>{{ scope.row.initTime | onlyDay}}</span>
                                </template>
                            </el-table-column>
                            <el-table-column
                                label="停留时间" width='100'>
                            <template slot-scope="scope">
                                <el-popover trigger="hover" placement="right-end"><p>{{ scope.row.currentTask.numOfdays | toDay}}</p>
                                    <div slot="reference" class="name-wrapper">
                                        <span>{{ scope.row.currentTask.numOfdays | toDay}}</span>
                                    </div>
                                </el-popover>
                          </template>
                            </el-table-column>  
                        </el-table>
                        <pagination :total="approvalTotal" :pageItem="pageItem"  @pagechange = "approvalPageChange"  ref = "approval" ></pagination>
                    </div>
                </div>
             </div>

               <div class="historyRecord" v-if="!toggleViewShow">
                    <div class = "fold"  @click = "showApproval = !showApproval;showWrite=false" v-bind:class="{'rotate':!showApproval}">
                        <img src="../../assets/xdesigner/unfold.png"></img>
                             <p>我的待办历史记录</p>
                             <span class = "count">{{ approvalHistoryTotal }}</span>
                         </div>

                    <div class="task_table table" v-show="showApproval">
                        <el-table
                            :data="approvaHistorylList"
                            ref="multipleTable"
                            style="width: 100%"
                            empty-text=" "
                            border
                            max-height="632">
                            
                         <el-table-column
                              label="任务编号" width='200'>
                              <template slot-scope="scope" >
                                    <span><a  :href="scope.row.checkUrl" target="_blank">{{scope.row.businessKey}}</a></span> 
                              </template>
                            </el-table-column>

                        <el-table-column
                                label="标题">
                                <template slot-scope="scope">
                                    <el-popover trigger="hover" placement="right-end">
                                        <p>{{ scope.row.businessSubject }}</p>
                                        <div slot="reference" class="name-wrapper">
                                            {{ scope.row.businessSubject}}
                                        </div>
                                    </el-popover>
                                </template>
                        </el-table-column>

                        <el-table-column
                            label="任务状态" width='100'>
                            <template slot-scope="scope">
                                <span>{{(scope.row.status,scope.row.statusType) | statusType(scope.row.status,scope.row.statusType)}}</span>
                            </template>
                         </el-table-column>

                        <el-table-column
                            label="任务审批类型" width='150'>
                            <template slot-scope="scope">
                                <span>{{scope.row.taskType}}</span>
                            </template>
                        </el-table-column>

                        <el-table-column
                            label="提交人">
                            <template slot-scope="scope">
                                <el-popover trigger="hover" placement="left">
                                    <p> {{ scope.row.initiator}}</p>
                                    <div slot="reference" class="name-wrapper">
                                        <span>{{ scope.row.initiator}}</span>
                                    </div>
                                </el-popover>
                            </template>
                        </el-table-column>

                        <el-table-column
                            label="提交时间" width='100'>
                            <template slot-scope="scope">
                                <span>{{ scope.row.initTime | onlyDay}}</span>
                            </template>
                        </el-table-column>

                        <el-table-column
                                label="停留时间" width='100'>
                            <template slot-scope="scope">
                                <el-popover trigger="hover" placement="right-end"><p>{{ scope.row.currentTask.numOfdays | toDay}}</p>
                                    <div slot="reference" class="name-wrapper">
                                        <span>{{ scope.row.currentTask.numOfdays | toDay}}</span>
                                    </div>
                                </el-popover>
                          </template>
                            </el-table-column>  
                        </el-table>

                    <pagination :total="approvalHistoryTotal" :pageItem="evalutionPageItem"  @pagechange = "approvalHistoryPageChange"  ref = "evalutionPage" ></pagination>
                </div>
               </div>
            </div>
            
                <div class = "docTaskWait" v-if="!isdocument">
                    <fmwait> </fmwait>
                </div>    
            </div>
            <div class = "myProject">
                <div class = "line">
                    <p class = "title_p">我的项目</p>
                    <span class = "more"><a href="project/list">更多</a></span>
                </div>
                <!-- <div class = "projectDetail" v-for="project in projectList">
                    <span >
                        <a :href="'/project/detail/' + project.pid">{{project.name}}</a>
                    </span>
                    <span>{{project.description}}</span>
                    <div class = "projectcount">
                        <p>任务数:</p>
                        <p class="number"><u>{{project.taskCount}}</u></p>
                        <p>交付件数:</p>
                        <p class = "number"><u>{{project.fileCount}}</u></p>
                        <p>成员数:</p>
                        <p class = "number"><u>{{project.memberCount}}</u></p>
                    </div>
                    
                    <div class = "line"></div>
                </div> -->
                <div class="task_table table">
                        <el-table
                            :data="projectList"
                            ref="multipleTable"
                            style="width: 100%"
                            border
                            max-height="632">
                            <el-table-column
                              label="项目名称">
                              <template slot-scope="scope">
                                 <el-popover trigger="hover" placement="right-end">
                                    <p> {{ scope.row.name }}</p>
                                    <div slot="reference" class="name-wrapper">
                                       <span>
                                            <a :href="'/project/detail/' + scope.row.pid">{{scope.row.name}}</a>
                                        </span>
                                    </div>
                                </el-popover>
                              </template>
                            </el-table-column>
                            <el-table-column
                                label="摘要">
                                <template slot-scope="scope">
                                    <el-popover trigger="hover" placement="right-end">
                                        <p>{{ scope.row.description}}</p>
                                        <div slot="reference" class="name-wrapper">
                                            <span>{{scope.row.description}}</span>
                                        </div>
                                    </el-popover>
                                </template>
                            </el-table-column>
                            <el-table-column width="100"
                                label="任务数">
                                <template slot-scope="scope">
                                    <a :href="'/project/detail/' + scope.row.pid">{{ scope.row.taskCount}}</a>
                                </template>
                            </el-table-column>
                            <el-table-column width="100"
                                label="交付件数">
                                <template slot-scope="scope">
                                    <a :href="'/project/deliverable/list?projectId=' + scope.row.pid">{{ scope.row.fileCount}}</a>
                                </template>
                            </el-table-column>
                            <el-table-column width="100"
                                label="成员数">
                                <template slot-scope="scope">  
                                    <a :href="'/project/member?projectId=' + scope.row.pid">{{ scope.row.memberCount}}</a>
                                </template>
                            </el-table-column>
                            <el-table-column width="150"
                                label="创建时间">
                                <template slot-scope="scope">  
                                    {{ scope.row.createTime | onlyDay }}
                                </template>
                            </el-table-column>
                           
                        </el-table>
                    </div>
            </div>
            <msgModal ref='msg'></msgModal>     
          
        </div>
    </div>
</template>

<script type="text/javascript">
import fmwait from '../indexwait/fmWait.vue'   
    export default{
        components:{fmwait},
        data(){
            return {
                taskList:[],
                total:0,
                pageItem:[{text:"5"},{text:"10"},{text:"20"}],
                showWrite:true,
                projectIdMap : {},
                projectNameMap : {},
                projectList : [],
                isdocument:true,
                taskUrl:"/project/task/transit/task/",//任务在线写作页面
                deliverableUrl:"/project/task/transit/deliverable/",//交付件在线浏览页面
                approvalList:[{name:'xxx'}],
                showApproval:false,
                approvalTotal:0,
                toggleViewShow:true,//切换待办任务和历史记录页面,默认显示待办页面
                approvaHistorylList:[],
                approvalHistoryTotal:0,
                evalutionPageItem:[{text:"5"},{text:"10"},{text:"20"}],

            }
        },

        created(){
            this.getProjectList();
        },
        methods:{

            viewDoc(task){
                let self = this;
                D.block();
                if(!task.nodeId){
                	window.open('/project/detail/' + self.projectIdMap[task.taskId]);
                    return;
                }
                self.$http.get('/project/taskextension/isIdpDocCreated.json'+new Date().getTime()+'?taskId=' + task.taskId).then(function(res){
                    D.unblock();
                    if(res && res.data && res.data.flag){
                        window.open(res.data.tips);
                    }else{
                        var errorcode = res.data.errorcode;
                        if (errorcode == "dfx.project.task.create.idpdoc.progress" ) {
                            D.showMsg("IDP文档创建中，请稍后再试！");
                        } else if (errorcode == "dfx.project.task.finddoc.failed" ) {
                            D.showMsg("交付件文档信息查询失败，请联系管理员。");
                        } else if(errorcode == "dfx.project.task.create.idpdoc.failed") {
                            D.showMsg("idp文档创建失败，请联系管理员。");
                        //通过任务生成交付件或者链接没有配置默认展开回复
                        } else if(errorcode == "dfx.project.task.deliverableType.url.failed" || errorcode == "dfx.project.task.notfind.deliverabledoc") {
                        	window.open('/project/detail/' + self.projectIdMap[task.taskId]);
                        } else {
                            D.showMsg();
                        }
                    }
                }).catch(function(){
                    D.unblock();
                    D.showMsg();
                })
            },
            pageChange(obj){
                var offset = obj ? obj.offset : 0;
                var limit = obj ? obj.limit : 5;
                this.getMyTask(offset,limit);
            },
            getMyTask(offset,limit){
                let self = this;
                self.$http.get('/myspace/task/query/page.json?limit=' + limit + '&offset=' + offset).then(function(res){
                    if(res && res.data && res.data.head && res.data.head.flag){
                        self.taskList = res.data.body.taskList;
                        self.total = res.data.body.total;
                        self.projectNameMap = res.data.body.projectNameMap;
                        self.projectIdMap = res.data.body.projectIdMap;
                    }
                    else
                    {
                        D.showMsg();
                    }
                }).catch(function(){
                    D.showMsg();
                })
            },
            //获取组件库待办
            approvalPageChange(obj){
                var offset = obj ? obj.offset : 0;
                var limit = obj ? obj.limit : 5;
                this.getCompTaskList(offset,limit);
            },
            getCompTaskList(offset,limit){
                let self = this;
                var project = {"isAllProject" : "false"};
                self.$http.get('/appstore/workFlow/task/page.json?limit=' + limit + '&offset=' + offset).then(res=>{
                    res= res.data;
                    if(res.head.flag){
                        self.approvalList = res.body.processInstances;
                        self.approvalTotal = res.body.count;
                        self.approvalList.forEach(function(item){
                            if(item.processId.match('DFX_Component')){
                                self.$set(item,'checkUrl','/appstore/check/'+item.businessKey+'?instanceId='+item.currentTask.instanceId+'&commonId='+item.commonId);
                                self.$set(item,'statusType','appstore');
                                self.$set(item,'taskType','组件库审批');
                            }
                            if(item.processId.match('DFX_FailureMode')){
                                if(item.status =='14'){
                                    self.$set(item,'checkUrl','/failuremode/review/handle/'+item.commonId+'?role=reviewers');
                                }else{
                                    self.$set(item,'checkUrl','/failuremode/handle/check/'+item.businessKey+'?instanceId='+item.currentTask.instanceId);
                                }
                                self.$set(item,'taskType','故障模式审批');
                            }
                        })

                    }else{
                        D.showMsg();
                    }
                }).catch(function(){
                    D.showMsg();
                });     
            },


            getProjectList(){
                let self = this;
                var project = {"isAllProject" : "false"};
                self.$http.post('/myspace/projectManagement/getProjectList/page.json?limit=5&offset=0&orderBy=timeDesc'
                       ,project
                ).then(res=>{
                    D.unblock();

                    if(res&&res.data&&res.data.head&&res.data.head.flag){
                        self.projectList=res.data.body.projectList;
                    }else{
                        D.showMsg();
                    }
                }).catch(function(){
                    D.unblock();
                    D.showMsg();
                });     
            },
        //当前待办
        currentTasks(){
            var self=this;
            self.toggleViewShow=true;
        },
        //历史记录
        historyRecord(){
            var self=this;
            self.toggleViewShow=false;
        },  
        //获取组件库历史待办
        approvalHistoryPageChange(obj){
                var offset = obj ? obj.offset : 0;
                var limit = obj ? obj.limit : 5;
                this.getApprovalHistoryPageChange(offset,limit);
               
            },
        getApprovalHistoryPageChange(offset,limit){
            let self=this;
            var project = {"isAllProject" : "false"}; 
            this.$http.post('/appstore/workFlow/task/history.json?'+(new Date()).getTime()+"&offset="+offset+"&limit="+limit
            ).then(function(res){
                D.unblock();
                self.approvaHistorylList=res.data.body.processInstances;
                self.approvalHistoryTotal=res.data.body.count;
                //console.log("aaaaaaaa",self.approvalHistoryTotal);
                res= res.data;
                if(res.head.flag){
                        self.approvalList = res.body.processInstances;
                        self.approvalTotal = res.body.count;
                        self.approvalList.forEach(function(item){
                            if(item.processId.match('DFX_Component')){
                                self.$set(item,'checkUrl','/appstore/check/'+item.businessKey+'?instanceId='+item.currentTask.instanceId+'&commonId='+item.commonId);
                                self.$set(item,'statusType','appstore');
                                self.$set(item,'taskType','组件库审批');
                            }
                            if(item.processId.match('DFX_FailureMode')){
                                if(item.status =='14'){
                                    self.$set(item,'checkUrl','/failuremode/review/handle/'+item.commonId+'?role=reviewers');
                                }else{
                                    self.$set(item,'checkUrl','/failuremode/handle/check/'+item.businessKey+'?instanceId='+item.currentTask.instanceId);
                                }
                                self.$set(item,'taskType','故障模式审批');
                            }
                        })

                    }else{
                        D.showMsg();
                    }
            }).catch(function(){
                D.showMsg();
             });
            },
            
        },
    
    }
</script>

<style type="text/css" lang = "stylus" scoped>
        .overview{
            min-height: 500px;
            .doc_write{
                padding: 18px 25px;
            }
            .doc_write_task{
               border: 1px solid #e8e8e8;
               box-shadow: 0 1px 4px 0 rgba(0,0,0,0.20);
            }
            .docTaskWait{
                margin: 10px;
                //border:1px solid #e8e8e8;
            }
            .title_p{
                padding-top: 24px;
                font-size: 18px;
                font-weight: bold;
                padding-left: 15px;
                margin-bottom: 10px;
            }
            .lable{
                margin: 10px;
                padding-top: 15px;
                padding-bottom: 13px;
                border-bottom: 1px solid  #e8e8e8;
                .lable_document{
                    cursor: pointer;
                    margin-left: 15px;
                    padding-bottom: 10px;
                }
                .lable_failuremode{
                    cursor: pointer;
                    margin-left: 30px;
                    padding-bottom: 10px;
                }
            }
            .active{
                border-bottom: 3px  solid #2d2f33;
            }
            .fold{
                height: 40px;
                background-color: #E3E5E6;
                margin: 0px 0px 10px 0px;
                padding: 10px;
                img{
                    float: left;
                    margin-right: 15px;
                    margin-left: 5px;
                    position: relative;
                    top: 5px;
                }
                p{
                    display: inline-block;
                }
                span{
                    color:white;
                    display: inline-block;
                    height: 20px;
                    width: 20px;
                    background-color: #f95f5b;
                    border-radius: 12px;
                    text-align: center;
                    padding-top: 3px;
                    font-size: 12px;}

            }
            .rotate{
               background-color: #E3E5E6;
               margin: 0 0 10px 0;
               padding: 10px;
               img{
                transform: rotate(270deg);
                float: left;
                margin-right: 15px;
                position: relative;
                top: 5px;
                }
                p{
                    display: inline-block;
                }
                span{
                    color: white;
                    display: inline-block;
                    height: 20px;
                    width: 20px;
                    background-color: #f95f5b;
                    border-radius: 12px;
                    text-align: center;
                    padding-top: 3px;
                    font-size: 12px;
                }
            }
            .task_table{
                padding: 5px 10px 10px 10px;
                .operate_td{
                    .span_btn{
                        padding: 0 6px;
                        cursor: pointer;
                        display: inline-block;
                        width: 30px;
                        height: 30px;
                        line-height: 36px;
                        text-align: center;
                        border-radius: 50%;
                        background:fff;

                    }
                    .span_btn:hover{
                        background:rgba(0,0,0,0.1);
                    } 
                    .span_btn:active{
                        border-radius: 50%;
                        background:rgba(0,0,0,0.2);
                    } 
                    .name-wrapper{
                        display: inline-block; 
                        overflow: initial !important;
                    }
                }
                
            }
            .myProject{
                margin-top: 20px;
                border: 1px solid #f0f0f0;
                box-shadow: 0 1px 4px 0 rgba(0,0,0,0.20);
           
            }
            .more{
                float: right;
                padding-top: 24px;
                padding-right: 10px;
                font-size: 14px;
                color: #999;
            }
            .myProject .title_p{
                display: inline-block;
                width: 300px;
                padding-left: 0px;
                padding-top: 0px;
                margin-top: 14px;
            }
            .line{
                border-bottom: 1px solid #e8e8e8;
                margin: 10px 15px;

            }
            .projectDetail{  
                span{
                    padding-left: 15px;
                    padding-right: 15px;
                    display: block;
                    font-size: 12px;
                    margin-bottom: 18px;
                    min-height: 20px;
                }
                a{
                    text-decoration: none;
                    color: #0a9dce;
                    font-size: 14px;
                }
            }
            .projectcount{
                padding-left: 15px;
                font-size: 12px;
                margin-bottom: 4px;
                p{
                    display: inline-block;
                }
            }
            .number{
                padding-left: 14px;
                padding-right: 45px; 
                color: #4c4c4c;
            }
            .historyRecordBtn{
                font-family: PingFangSC-Regular;
                font-size: 12px;
                color: #000;
                letter-spacing: 0;
                text-align: center;
                width:90px;
                height:28px;
                background: #fff;
                border-radius: 0 2px 2px 0;
                float:right;
                border: 1px solid #ccc;
            }
            .search_div{
                height: 30px;
            }
            .unfinishTaskBtn {
                font-family: PingFangSC-Regular;
                font-size: 12px;
                color: #fff;
                letter-spacing: 0;
                text-align: center;
                width: 90px;
                height: 28px;
                background: #3d70b2;
                border-radius: 0 2px 2px 0;
                float: right;
                border: 1px solid #ccc;
            }           
        }
</style>

**********************
<template>
    <div class="docWait">
        <div >
        <div class="fold"  @click="documentWrite" v-bind:class="{'rotate':documentWriteArrow}">
              <img  src="../../assets/require/unfold_cont_nor.png">
              <p >我的申请</p>
              <span class="count">{{total}}</span>
          </div>
        <div class="require_table table" v-show="documentWriteShow">
            <el-table
                :data="mydocL"
                style="width: 100%"
                empty-text=" "
                max-height="635"
                border>
                <el-table-column label="任务名称">
                    <template slot-scope="scope">
                        <div slot="reference" class="name-wrapper" :title="scope.row.name">
                           <a  href="javascript:void(0)" @click="toFmEvalution(scope.row.nid)">{{ scope.row.name}}</a>
                        </div>
                    </template>
                </el-table-column>
                <el-table-column label="任务简介">
                    <template slot-scope="scope">
                            <div slot="reference" class="name-wrapper" :title="scope.row.fmName">
                                <span>{{ scope.row.fmName}}</span>
                            </div>
                    </template>
                </el-table-column>
                
                <el-table-column label="申请时间">
                    <template slot-scope="scope">
                        <el-popover trigger="hover" placement="left">
                            <p> {{ scope.row.createTime}}</p>
                            <div slot="reference" class="name-wrapper">
                                <span>{{ scope.row.createTime}}</span>
                            </div>
                        </el-popover>
                    </template>
                </el-table-column>
                <el-table-column label="发布时间">
                    <template slot-scope="scope">
                        <el-popover trigger="hover" placement="right-end">
                            <p> {{ scope.row.publishTime}}</p>
                            <div slot="reference" class="name-wrapper">
                                <div>{{ scope.row.publishTime }}</div>
                            </div>
                        </el-popover>
                    </template>
                </el-table-column>
            </el-table>
            <pagination :total = "total" :pageItem="pageItem" @pagechange = "pagechange" ref = "pag"></pagination>
        </div>
        </div>
        <div class="">
        <div class="fold" @click="failuremodeEvalution" v-bind:class="{'rotate':failuremodeEvalutionArrow}">
              <img  src="../../assets/require/unfold_cont_nor.png">
              <p >我的评审</p>
              <span class="count">{{evalutionTotal}}</span>
          </div>
        <div class="require_table table" v-show="failuremodeEvalutionShow">
            <el-table
                :data="countHistory"
                style="width: 100%"
                empty-text=" "
                max-height="635"
                border>
                <el-table-column label="任务编号">
                    <template slot-scope="scope">
                        {{scope.row.businessKey}}
                    </template>
                </el-table-column>
                <el-table-column label="任务名称">
                    <template slot-scope="scope">
                        <el-popover trigger="hover" placement="right-end">
                            <p>{{ scope.row.businessSubject }}</p>
                            <div slot="reference" class="name-wrapper">
                                {{ scope.row.businessSubject}}
                            </div>
                        </el-popover>
                    </template>
                </el-table-column>

                <el-table-column label="流程角色">
                    <template slot-scope="scope">
                        <el-popover trigger="hover" placement="left">
                            <p> {{ (scope.row.currentTask.taskId+':'+scope.row.processId) | turnTask }}</p>
                            <div slot="reference" class="name-wrapper">
                                <span>{{ (scope.row.currentTask.taskId+':'+scope.row.processId) | turnTask }}</span>
                            </div>
                        </el-popover>
                    </template>
                </el-table-column>

                <el-table-column label="任务简介">
                    <template slot-scope="scope">
                            <div slot="reference" class="name-wrapper" :title="scope.row.fmName" >
                                <span>{{ scope.row.fmName}}</span>
                            </div>
                    </template>
                </el-table-column>
                <el-table-column label="提交人">
                    <template slot-scope="scope">
                        <el-popover trigger="hover" placement="left">
                            <p> {{ scope.row.initiator}}</p>
                            <div slot="reference" class="name-wrapper">
                                <span>{{ scope.row.initiator}}</span>
                            </div>
                        </el-popover>
                    </template>
                </el-table-column>
                <el-table-column label="提交时间">
                    <template slot-scope="scope">
                        <el-popover trigger="hover" placement="right-end">
                            <p> {{ scope.row.currentTask.handleTime}}</p>
                            <div slot="reference" class="name-wrapper">
                                <div>{{ scope.row.currentTask.handleTime | changeDay }}</div>
                            </div>
                        </el-popover>
                    </template>
                </el-table-column>
            </el-table>
            <pagination :total = "evalutionTotal" :pageItem="evalutionPageItem" @pagechange = "getEvalutionTaskResult" ref = "evalutionPage"></pagination>
        </div>
        </div>
        <div class="clearBox"></div>
    </div>
</template>
<script>
    export default{
        data(){
            let that = this;
            return{
                title:'',
                urlOrigin:location.origin,
                mydocL:[],
                countHistory:[],
                startDate:'',
                endDate:'',
                total:'0',
                evalutionTotal:'0',
                documentWriteShow:true,//故障评审文档
                failuremodeEvalutionShow:false,//故障评审任务
                //箭头样式效果
                documentWriteArrow:true,
                faiuremodeEvalutionArrow:false,
                evalutionPageItem:[{text:"5"},{text:"10"},{text:"20"}],
                pageItem:[{text:"5"},{text:"10"},{text:"20"}],
            }
        },
        filters:{
            turnTask(str){
              var strs = str.split(":");
              if(strs){
                  for (var i in strs){
                      if (strs[1]=='DFX_FMDelete'){
                          return '审批删除任务';
                      }else if (strs[1]=='DFX_FailureMode' && strs[0]=='usertaskCheck'){
                          return '主审任务';
                      }else{
                          return '检视任务';
                      }
                  }
              }
            }
        },
        methods:{
            toFmEvalution(nid){
              window.open("/failuremode/review/detail/"+nid);
            },
            documentWrite(){
             let self=this;
             self.documentWriteShow=!self.documentWriteShow;
             if(self.documentWriteShow){
                //改变箭头方向以及外间距
                self.failuremodeEvalutionShow=false;
                self.failuremodeEvalutionArrow=false;
                self.documentWriteArrow=true;
             }else{
                self.documentWriteArrow=false;
             }
          },
          //故障评审任务是否显示
          failuremodeEvalution(){
             let self=this;
             self.failuremodeEvalutionShow=!self.failuremodeEvalutionShow;
             if(self.failuremodeEvalutionShow){
                self.documentWriteShow=false;
                self.documentWriteArrow=false;
                self.failuremodeEvalutionArrow=true;
             }else{
                 self.failuremodeEvalutionArrow=false;
             }
          },
          //页面初始化
          pagechange(obj){
                this.getResult(obj);
          },
          getResult(obj){
              D.block();
              let self = this;
              var offset=obj.offset|| "0";
              var limit=obj.limit || "20";
              //13打回重填，14检视，15主审
              self.status="1;14;15",
              this.$http({
                  url:'/failuremode/document/doc/query/page.json',
                  method:'POST',
                  data:{
                      offset:offset,
                      limit:limit,
                      mid:"DT-FM",
                      "fieldValues":{     
                          "domain": {
                              "field": "domain",
                              "vocabularyId": null,
                              "values": []
                          },
                          "termid":{
                              "field": "termid",
                              "vocabularyId": null,
                              "values": []
                          },
                      },                        
                      status:"",
                      midtag:"INST",
                      name:""
                  }
              }).then(function(res){
                  D.unblock();
                  self.total= res.data.body.count;
                  self.mydocL = res.data.body.nodeExEis;
                  for (var i = 0; i < self.mydocL.length; i++) {
                      var nodes =self.mydocL[i];
                      nodes.domain = (nodes.fieldValues && nodes.fieldValues.domain) ? 
                      nodes.fieldValues.domain.values[0] : '';
                      nodes.termid = (nodes.fieldValues && nodes.fieldValues.termid) ? 
                      nodes.fieldValues.termid.values[0] : '';
                  };
              }).catch(function(){
                   D.unblock();
              });
          },
            getEvalutionTaskResult(obj){
                let self = this;
                var offset=obj.offset|| "0";
                var limit=obj.limit || "20";
                D.block();
                this.$http({
                    url:'/failuremode/workflow/task/history.json',
                    method:'POST',
                    data:{
                        offset:offset,
                        limit:limit,                        
                        procDefKey:'DFX_FailureMode'
                    }
                }).then(function(res){
                    D.unblock();
                    self.countHistory = res.data.body.processinstancebeanexs;
                    self.evalutionTotal= res.data.body.count;
                    console.log("aaaaaaaa",self.countHistory);
                }).catch(function(){
                    //D.showMsg();
                });
            },
        },
       
    }
</script>
<style lang="stylus">
.requirehistoryVue{

    .documentWriteDiv {
        background-color: #e3e5e6;
        width: 100%;
        height: 35px;
        padding-left: 10px;
        clear: both;
    }
    .documentArrow {
        width: 100%;
        margin-top: 10px;
    }
    .arrow {
        width: 30px;
        height: 27px;
        float: left;
        padding-top: 8px;
    }
    .rotate {
        transform: rotate(90deg);
        padding-left: 10px;
    }
    .documentWriteTitle {
        float: left;
        height: 27px;
        width: 65px;
        padding-top: 8px;
    }
    .orangeCircle {
        width: 25px;
        height: 25px;
        background-color: #f95f5b;
        border-radius: 25px;
        float: left;
        margin-top: 6px;
    }
    .evalutionNum {
        padding-top: 4px;
        text-align: center;
        color: #fff;
    }
    .require_table{
        margin-top:10px
    }
    .pickerBox{
      float left
      border: 1px solid #999;
      &:last-child{
        margin-left: 5px;
      }
      label{
        background #fff
        border-right: 1px solid #999;
        line-height 24px
        height 24px
      }
    }
  .el-date-editor.el-input {
      width: 130px;
      input{
        border-radius: 0;
        border none
        line-height: 22px;
        height: 24px;
      }
      i{
        width 25px
        color #999
      }

  }
  .el-input--prefix .el-input__inner {
    padding-left: 10px;
  }
  .el-input__prefix {
      left: 130px;
      transition: all .3s;
  }
  .pinker_right{
    float left
    padding 1px
  }
}
</style>
-----------**********
<template>
<div class="docWait">
    <div class="search_div" >
            <div class="btnBox">
                <button v-bind:class="[!toggleViewShow?'unfinishTaskBtn':'historyRecordBtn']" @click="historyRecord">历史记录</button>
                <button v-bind:class="[toggleViewShow?'unfinishTaskBtn':'historyRecordBtn']" @click="currentTask">当前待办</button>
            </div>
    </div>
    <div class="requireEvalution" v-if="toggleViewShow">
      <!-- 需求评审文档 -->
          <div class="fold" @click="documentWrite" v-bind:class="{'rotate':documentWriteArrow}">
              <img src="../../assets/require/unfold_cont_nor.png">
              <p >故障模式检视修改任务</p>
              <span class="count" >{{total}}</span>
          </div>
          <div class="documentWriteData"  v-show="documentWriteShow">
              <div class="require_table table">
                  <el-table
                      :data="docL"
                      style="width: 100%"
                      empty-text=" "
                      max-height="635"
                      border>
                      <el-table-column label="任务名称">
                          <template slot-scope="scope">
                              <div slot="reference" class="name-wrapper" :title="scope.row.name">
                                   <a  href="javascript:void(0)" @click="toFmEvalution(scope.row.nid)">{{ scope.row.name}}</a>
                              </div>
                          </template>
                      </el-table-column>
                      <el-table-column label="任务简介">
                    <template slot-scope="scope">
                            <div slot="reference" class="name-wrapper" :title="scope.row.fmName">
                                <span >{{ scope.row.fmName}}</span>
                            </div>
                    </template>
                </el-table-column>
                      <el-table-column label="状态">
                          <template slot-scope="scope">
                              <div class="status_td"><img :src="scope.row.statusUrl"><span>{{ scope.row.status |status }}</span></div>
                          </template>
                      </el-table-column>
                      
                      <el-table-column label="提交时间">
                          <template slot-scope="scope">
                              <el-popover trigger="hover" placement="right-end">
                                  <p>{{ scope.row.createTime}}</p>
                                  <div slot="reference" class="name-wrapper">
                                  <span>
                                      {{scope.row.createTime }}
                                  </span>
                                  </div>
                              </el-popover>
                          </template>
                      </el-table-column>
                      <el-table-column label="操作">
                          <template slot-scope="scope">
                              <div class="operate_td">
                                  <!-- <span title="编辑" class="span_btn" @click="edit(scope.row)">
                                      <img :src="scope.row.editUrl"></img></span>
                                  </span> -->
                                  <span title="处理检视" class="span_btn" @click="deal(scope.row)">
                                      <img :src="scope.row.dealCheckUrl"></img>
                                  </span>
                                  <span title="结束检视" class="span_btn" @click="end(scope.row)">
                                      <img :src="scope.row.endCheckUrl"></img>
                                  </span>
                                  <span title="查看检视" class="span_btn" @click="check(scope.row)">
                                      <img :src="scope.row.viewCheckUrl"></img>
                                  </span> 
                                  <!-- <el-popover trigger="click" placement="bottom-start">
                                      <ul class="more_btn_div" style="line-height: 25px;">
                                          <li @click="deal(scope.row)">
                                              <img :src="scope.row.dealCheckUrl" style="padding-right:10px;"></img>处理检视
                                          </li>
                                          <li @click="end(scope.row)">
                                              <img :src="scope.row.endCheckUrl" style="padding-right:10px;"></img>结束检视
                                          </li>
                                          <li @click="check(scope.row)">
                                              <img :src="scope.row.viewCheckUrl" style="padding-right:10px;"></img>查看检视
                                          </li>
                                          <li @click="dele(scope.row)">
                                              <img :src="scope.row.dltUrl" style="padding-right:10px;"></img>删除
                                          </li>
                                      </ul> 
                                      <div slot="reference" class="name-wrapper">
                                          <span title="更多操作" class="span_btn">
                                              <img src="../../assets/require/more-btn.png"></img>
                                          </span>
                                      </div>
                                  </el-popover> -->
                              </div>
                            </template>
                        </el-table-column>
                      </el-table>
                  <pagination :total = "total" :pageItem="pageItem" @pagechange = "pagechange" ref = "pag"></pagination>
                  <msgModal ref='msg'></msgModal>
              </div> 
              <el-dialog v-dialogDrag title = "查看检视意见" size = "small" :visible.sync = "checkView" class = "viewDialog" :close-on-click-modal = "false">
                  <div class="mainbox" style="height:440px;padding:0 2px" >
                      <div class="table" style="background:#fff">
                            <el-table
                                :data="detailItem" 
                                max-height="350"
                                empty-text=" "
                                border
                                style="width: 100%">
                                <el-table-column label="NO." 
                                    type="index"
                                    width="50">
                                </el-table-column>
                                <el-table-column prop="reviewer" label="检视人" width="100px">
                                    <template slot-scope="scope">
                                          <div slot="reference" class="name-wrapper">
                                            <span >{{ scope.row.reviewer }}</span>
                                          </div>
                                    </template>
                                </el-table-column>
                                <el-table-column prop="selectText" label="文档中的内容" width="150px">
                                    <template slot-scope="scope">
                                         <el-popover trigger="hover" placement="right-end">
                                          <p>{{ scope.row.selectText }}</p>
                                          <div slot="reference" class="name-wrapper">
                                            <span>{{ scope.row.selectText }}</span>
                                          </div>
                                        </el-popover>
                                    </template>
                                </el-table-column>
                                <el-table-column prop="commentcontent" label="批注内容" width="150px">
                                    <template slot-scope="scope">
                                        <el-popover trigger="hover" placement="right-end">
                                            <p>{{ scope.row.commentcontent }}</p>
                                            <div slot="reference" class="name-wrapper">
                                                <span>{{ scope.row.commentcontent }}</span>
                                            </div>
                                        </el-popover>
                                    </template>
                                </el-table-column>
                                <el-table-column prop="topicTitle" label="章节标题" >
                                    <template slot-scope="scope">
                                        <el-popover trigger="hover" placement="right-end">
                                            <p>{{ scope.row.topicTitle }}</p>
                                            <div slot="reference" class="name-wrapper">
                                                <span>{{ scope.row.topicTitle }}</span>
                                            </div>
                                        </el-popover>
                                    </template>
                                </el-table-column>
                                 <el-table-column prop="suggestionTime" label="批注日期" >
                                      <template slot-scope="scope">
                                          <div slot="reference" class="name-wrapper" >
                                              <span >{{ scope.row.suggestionTime | onlyDay1 }}</span>
                                          </div>
                                      </template>
                                </el-table-column>
                                 <el-table-column prop="status" label="检视结果" >
                                      <template slot-scope="scope">
                                          <div slot="reference" class="name-wrapper">
                                              <span >{{ scope.row.status | viewStatu }}</span>
                                          </div>
                                      </template>
                                </el-table-column>
                                 <el-table-column prop="lastOneReviewContent" label="检视意见" >
                                      <template slot-scope="scope">
                                         <el-popover trigger="hover" placement="right-end">
                                              <p>{{ scope.row.lastOneReviewContent }}</p>
                                              <div slot="reference" class="name-wrapper">
                                                  <span>{{ scope.row.lastOneReviewContent }}</span>
                                              </div>
                                          </el-popover>
                                      </template>
                                </el-table-column>
                            </el-table>
                      </div>
                      <pagination :total = "checkViewTotal" :pageItem="checkViewPageItem" @pagechange = "checkViewResult" ref = "checkViewPag"></pagination>
                  </div>
                  <div class = "closeView" style="height:60px;border-top:1px solid #c6c3c0">
                        <button class = "btn btn_basic btn_light review_close" @click = "checkView = false" style="float: right;
                        margin-top: 19px;
                        margin-right: 20px;
                        ">关闭</button>
                  </div>
              </el-dialog> 
          </div>
      <!--需求评审任务-->
      <div class="requireEvalutionTask" >
          <div class="fold" @click="failuremodeEvalution" v-bind:class="{'rotate':failuremodeEvalutionArrow}">
              <img  src="../../assets/require/unfold_cont_nor.png">
              <p >故障评审任务</p>
              <span class="count">{{evalutionTotal}}</span>
          </div>
          <!-- 需求评审任务数据集合 -->
          <div class="requireEvalutionTaskLib" v-show="failuremodeEvalutionShow"> 
              <div class="require_table table">
                  <el-table
                      :data="evalutionL"
                      style="width: 100%"
                      empty-text=" "
                      max-height="635"
                      border>
                      <el-table-column label="任务编号" width="200">
                      <!-- //usertaskReview检视，usertaskCheck主审，countersignature会签，approval审批 -->
                          <template slot-scope="scope">
                              <div>
                              <a v-if="scope.row.currentTask.taskId=='usertaskReview'" href="javascript:void(0)" @click="gotoPage(scope.row,'review')">{{scope.row.businessKey}}</a>
                              <a v-else-if="scope.row.currentTask.taskId=='usertaskCheck' && scope.row.processId.indexOf('DFX_FMDelete')=='-1'" href="javascript:void(0)" 
                              @click="gotoPage(scope.row,'check')">{{scope.row.businessKey}}</a>
                               <a v-else href="javascript:void(0)" @click="gotoPage(scope.row,'delete/approval')">{{scope.row.businessKey}}</a>
                              </div>
                          </template>
                      </el-table-column>
                      <el-table-column
                          label="任务名称">
                          <template slot-scope="scope">
                              <el-popover trigger="hover" placement="right-end">
                                <p>{{ scope.row.businessSubject }}</p>
                                <div slot="reference" class="name-wrapper">
                                  {{ scope.row.businessSubject}}
                                </div>
                              </el-popover>
                          </template>
                      </el-table-column>
                      <el-table-column label="任务简介">
                        <template slot-scope="scope">
                            <div slot="reference" class="name-wrapper"  :title="scope.row.fmName">
                                <span  >{{ scope.row.fmName}}</span>
                            </div>
                      </template>
                    </el-table-column>
                      <el-table-column
                          label="状态"
                          >
                          <template slot-scope="scope">
                              <div class="status_td"><img :src="scope.row.statusUrl"><span>{{(scope.row.currentTask.taskId+':'+scope.row.processId) | turnTask}}</span></div>
                          </template>
                      </el-table-column>
                      <el-table-column
                          label="提交人"
                          >
                          <template slot-scope="scope">
                              <el-popover trigger="hover" placement="left">
                                  <p>{{ scope.row.initiator }}</p>
                                  <div slot="reference" class="name-wrapper">
                                      <span>{{ scope.row.initiator }}</span>
                                  </div>
                              </el-popover>
                          </template>
                      </el-table-column>
                      <el-table-column
                          label="提交时间"
                          >
                        <template slot-scope="scope">
                           <el-popover trigger="hover" placement="left"> <p>{{ scope.row.initTime}}</p>
                                <div slot="reference" class="name-wrapper">
                                    <span>{{ scope.row.initTime}}</span>
                                </div>
                            </el-popover>
                        </template>
                      </el-table-column>
                      <el-table-column
                          label="停留时间">
                          <template slot-scope="scope">
                              <el-popover trigger="hover" placement="right-end"><p>{{ scope.row.currentTask.numOfdays | toDay}}</p>
                                  <div slot="reference" class="name-wrapper">
                                      <span>{{ scope.row.currentTask.numOfdays | toDay}}</span>
                                  </div>
                              </el-popover>
                          </template>
                      </el-table-column>
                  </el-table>
                  <pagination :total = "evalutionTotal" :pageItem="evalutionPageItem" @pagechange = "getEvalutionTaskResult" ref = "evalutionPage"></pagination>
            
              </div>
                
          </div>
      </div>
        </div>
        <div class="historyRecord" v-if="!toggleViewShow">
              <fmHistory :workflowtag="workflowtag"></fmHistory>  
        </div>
</div>
</template>
<script>
  import fmHistory from './fmHistory.vue'
  export default{
      data(){

          return{
              type:"",
            //检视review,主审check,会签countersignature,审批approval,删除审批delete/approval
              title:'',
              urlOrigin:location.origin,
              docL:[],//文档数据
              evalutionL:[],//评审任务数据
              approvalL:[],//审批删除数据
              workflowtag:'DFX_FailureMode;DFX_FMDelete',
              checkView:false,
              detailItem:[],
              detailItems:[],
              total:0,//需求评审文档任务数量
              evalutionTotal:0,//需求评审任务数量
              checkViewTotal:0,//查看检视数据数量
              evalutionPageItem:[{text:"5"},{text:"10"},{text:"20"}],
              pageItem:[{text:"5"},{text:"10"},{text:"20"}],
              checkViewPageItem:[{text:"20"},{text:"50"},{text:"100"}],
              //表格是否显示
              documentWriteShow:true,//故障评审文档
              failuremodeEvalutionShow:false,//故障评审任务
              //箭头样式效果
              documentWriteArrow:true,
              faiuremodeEvalutionArrow:false,
              status:'',
              iid : '',//每行的nid,通过值是否相等来判断显示更多操作列表,
              toggleViewShow:true,//切换待办任务和历史记录页面,默认显示待办页面
              waitDelete:'',

          }
      },
      created(){
        
      },
      filters:{
            turnTask(str){
              var strs = str.split(":");
              if(strs){
                  for (var i in strs){
                      if (strs[1]=='DFX_FMDelete'){
                          return '待删除';
                      }else if (strs[1]=='DFX_FailureMode' && strs[0]=='usertaskCheck'){
                          return '待主审';
                      }else{
                          return '待检视';
                      }
                  }
              }
            },
           
        },
      methods:{
        //需求评审文档是否显示
         documentWrite(){
             let self=this;
             self.documentWriteShow=!self.documentWriteShow;
             if(self.documentWriteShow){
                //改变箭头方向以及外间距
                self.failuremodeEvalutionShow=false;
                self.failuremodeEvalutionArrow=false;
                self.documentWriteArrow=true;
             }else{
                self.documentWriteArrow=false;
             }
          },
          //故障评审任务是否显示
          failuremodeEvalution(){
             let self=this;
             self.failuremodeEvalutionShow=!self.failuremodeEvalutionShow;
             if(self.failuremodeEvalutionShow){
                self.documentWriteShow=false;
                self.documentWriteArrow=false;
                self.failuremodeEvalutionArrow=true;
             }else{
                 self.failuremodeEvalutionArrow=false;
             }
          },

          

          //页面初始化
          pagechange(obj){
                this.getResult(obj);
              },
          getResult(obj){
              D.block();
              let self = this;
              var offset=obj.offset|| "0";
              var limit=obj.limit || "5";
              //13打回重填，14检视
              self.status="14"
              this.$http({
                  url:'/failuremode/document/doc/query/page.json',
                  method:'POST',
                  data:{
                      offset:offset,
                      limit:limit,
                      mid:"DT-FM",
                      "fieldValues":{     
                          "domain": {
                              "field": "domain",
                              "vocabularyId": null,
                              "values": []
                          },
                          "termid":{
                              "field": "termid",
                              "vocabularyId": null,
                              "values": []
                          },
                      },                        
                      status:self.status,
                      midtag:"INST",
                      name:this.title
                  }
              }).then(function(res){
                  D.unblock();
                  self.total= res.data.body.count;
                  self.docL = res.data.body.nodeExEis;
                  for (var i = 0; i < self.docL.length; i++) {
                      var nodes =self.docL[i];
                      nodes.domain = (nodes.fieldValues && nodes.fieldValues.domain) ? 
                      nodes.fieldValues.domain.values[0] : '';
                      nodes.termid = (nodes.fieldValues && nodes.fieldValues.termid) ? 
                      nodes.fieldValues.termid.values[0] : '';
                  };
                  self.setImageUrl(self.docL);

                  
                  
              }).catch(function(){
                   D.unblock();
                  //D.showMsg();
              });
          },
          //评审任务
          getEvalutionTaskResult(obj){
              D.block();
              let self = this;
              var offset=obj.offset|| "0";
              var limit=obj.limit || "20";
              //usertaskReview检视,usertaskCheck主审，countersignature会签，usertaskRelease审批,usertaskDelCheck审批删除
              self.status="usertaskReview;usertaskCheck;usertaskDelCheck";
              this.$http({
                  url:'/failuremode/workflow/doc/task/query/page.json',
                  method:'POST',
                  data:{
                      offset:offset,
                      limit:limit,
                      workflowtag:self.workflowtag,
                      status:self.status
                  }
              }).then(function(res){
                  D.unblock();
                  self.evalutionTotal= res.data.body.count;
                  self.evalutionL = res.data.body.processinstancebeanexs;
                  self.setImageUrl(self.evalutionL);
                  
                  
              }).catch(function(){
                   D.unblock();
                  //D.showMsg();
              });
          },
          //通过status得到相应的图片路径，obj对象(包含status)集合
          setImageUrl(obj){
            let self=this;
            if(!obj){
              return;
            }
            obj.forEach(function(item){
                    //打回重填和检视操作按钮
                    if(item.status=='14'){
                        //self.$set(item,'dltUrl',require('../../assets/require/delete-btn.png')); 
                        //self.$set(item,'editUrl',require('../../assets/require/edit_btn.png'));
                        //self.$set(item,'publishUrl',require('../../assets/require/publish_btn.png'));
                        self.$set(item,'dealCheckUrl',require('../../assets/require/deal_btn.png'));
                        self.$set(item,'endCheckUrl',require('../../assets/require/end_btn.png'));
                        self.$set(item,'viewCheckUrl',require('../../assets/require/view_btn.png')); 
                        
                    }
                    self.$set(item,'statusUrl',require('../../assets/require/status_btn_processing.png'));
                   /* else if(item.status=='14'){
                        self.$set(item,'dltUrl',require('../../assets/require/delete-btn_no.png')); 
                        self.$set(item,'editUrl',require('../../assets/require/edit_btn_no.png'));
                        self.$set(item,'publishUrl',require('../../assets/require/publish_btn_no.png'));
                        self.$set(item,'dealCheckUrl',require('../../assets/require/deal_btn.png'));
                        self.$set(item,'endCheckUrl',require('../../assets/require/end_btn.png')); 
                        self.$set(item,'viewCheckUrl',require('../../assets/require/view_btn.png'));
                        
                    }*/
                    
              });
          },


          /*edit(item){
              //13打回重回状态
              if(item.status!='13'){
                return;
              }
              window.open("/iteminfo/review/document/maintain/" + item.nid);  
          },*/
          publish(item){
              //13打回重回状态
              if(item.status!='13'){
                return;
              }
              var nid=item.nid;
              window.open("/iteminfo/require/publish/application/" + nid);
          },
          dele(item){
              //13打回重回状态
              if(item.status!='13'){
                return;
              }
              let self = this;
              var nid=item.nid;
              this.$refs.msg.confirm("确认删除?",deleteInst);  
              function deleteInst(){
                D.block();
                  self.$http({
                      url:'/iteminfo/document/doc/delete.json',
                      data:{
                          nid:nid,
                          reason:""
                      },
                      method:"delete",
                  }).then(res => {
                    D.unblock();
                      if(res.data.body.flag){
                          // self.$emit("update");
                          // self.$refs.pag.pagechange();
                          self.getResult({limit:"5",offset:"0"});
                          //self.$refs.msg.show("删除成功。",true);
                      }else{
                          self.$refs.msg.show("删除失败。",false);
                      }
                  }).catch(res =>　{D.unblock();self.$refs.msg.show("服务器错误");})
              };
          },
          //结束检视
          end(item){
              if(item.status!='14'){
                return;
              }
              let self = this;
              function endView(){
                D.block();
                  this.$http.get('/failuremode/workflow/task/submitbynid.json',{
                      params:{
                          nid:item.nid
                      }
                  }).then(res => {
                    D.unblock();
                      if(res.data.body.flag){
                          self.$emit("update");
                          //self.$refs.msg.show("操作成功",false);
                          item.status = 15;
                          self.getResult({limit:"5",offset:"0"});
                      }
                      else{
                          self.$refs.msg.show(res.data.body.errorInfo,true);
                      }
                  })
              };
              this.$refs.msg.confirm("确认结束检视意见?",endView);  
          },
          //处理检视
          deal(item){
            //14检视状态
            if(item.status!='14'){
              return ;
            }
            let self = this;
            var nid=item.nid;
           
            D.block();
               this.$http.get('/failuremode/idp/editor/review/url.json',{
              params:{
                  nid:nid,
                  role:"author"
                  }
              }).then(res =>{
                D.unblock();
                  if(res.data.head.flag){
                      window.open("/failuremode/handle/review/"+nid+"?role=author"); 
                  }
                  else{
                      D.showMsg("没有发起检视");
                  }
              })
          },
          //查看检视
          check(item){
              if(item.status!='14'){
                return;
              }
              let self = this;
              self.checkView = true;
              var nid=item.nid;
              D.block();
              this.$http.get('/failuremode/idp/getAllManualComment.json?'+(new Date()).getTime() + '&nid='+nid)
              .then(res => {
                  D.unblock();
                  self.detailItems = res.data;
                  self.checkViewTotal = res.data.length;
                  self.commentQuery({offset:"0",limit:"10"});
                  self.$refs.checkViewPag.obj.limit = 10;
              })
          },
          //查看检视内容
          checkViewResult(obj){
                  this.commentQuery(obj)
          },
          commentQuery(obj){
            let offset=obj.offset|| 0, limit=obj.limit || 10;
            let start = offset, end = offset+limit;
            if(end>this.detailItems.length){
                end=this.detailItems.length
            }
            this.detailItem = [];
            for(let i = start; i< end;i++){
                this.detailItem.push(this.detailItems[i])
            }
          },
           //跳入主审和会签页面
          // /检视review,主审check,会签countersignature,审批approval,删除审批delete/approval
           gotoPage(key,type){

                let self = this;
                self.type=type;

                // 检视
                if("review"==self.type ){
                  let self = this;
                  let bk = key.businessKey;
                    this.$http.get('/failuremode/workflow/nid.json?bk='+bk,{cache:false})
                        .then(function(res){
                           window.open('/failuremode/review/handle/'+res.data+'?role=reviewers');
                        })
                }
                
                if("check" ==self.type ){
                    // window.open("/iteminfo/require/handle/check/" + key.businessKey + "?entry=" + self.type);
                    //window.location.href = window.location.origin +"/iteminfo/require/handle/check/" + key.businessKey + "?entry=" + self.type;
                     window.open("/failuremode/handle/check/" + key.businessKey + '?instanceId=' + key.currentTask.instanceId);
                    return;
                }
                if("delete/approval"==self.type ){
                    window.open("/failuremode/handle/delete/approval/" + key.businessKey+"/"+key.currentTask.instanceId);
                    return;
                }
        },
        
        //查看流程处理人
        toFmEvalution(nid){
              window.open("/failuremode/review/detail/"+nid);
        },
        //点击显示更多操作对iid进行赋值显示，否则重置iid为null隐藏更多操作界面
        showOperateImg(obj){
          if(this.iid==obj.nid){
            this.iid="";
          }else{
            this.iid=obj.nid
          }
        },
        //当前待办
        currentTask(){
            var self=this;
            self.toggleViewShow=true;
        },
        //历史记录
        historyRecord(){
            var self=this;
            self.toggleViewShow=false;
        }
          
      },
      components:{
        fmHistory
      }
}

</script>

<style lang="stylus">

.docWait{
  .unfinishTaskBtn {
      font-family: PingFangSC-Regular;
      font-size: 12px;
      color: #fff;
      letter-spacing: 0;
      text-align: center;
      width: 90px;
      height: 28px;
      background: #3d70b2;
      border-radius: 0 2px 2px 0;
      float: right;
      border: 1px solid #ccc;
  }
  .historyRecordBtn {
      font-family: PingFangSC-Regular;
      font-size: 12px;
      color: #000;
      letter-spacing: 0;
      text-align: center;
      width: 90px;
      height: 28px;
      background: #fff;
      border-radius: 0 2px 2px 0;
      float: right;
      border: 1px solid #ccc;
  }
  .search_div {
      padding-bottom: 25px;
  }
  .fold span {
    color: #fff;
    display: inline-block;
    height: 20px;
    width: 20px;
    background-color: #f95f5b;
    border-radius: 12px;
    text-align: center;
    padding-top: 3px;
    font-size: 12px;
}
 .rotate span {
      color: #fff;
      display: inline-block;
      height: 20px;
      width: 20px;
      background-color: #f95f5b;
      border-radius: 12px;
      text-align: center;
      padding-top: 3px;
      font-size: 12px;
  }
  .fold {
      height: 40px;
      background-color: #e3e5e6;
      margin: 10px 0px;
      padding: 10px;
  }
  .fold p {
      display: inline-block;
  }
 .rotate img {
      transform: rotate(270deg);
      float: left;
      margin-right: 15px;
      position: relative;
      top: 5px;
  }
  .status_td{
      img{
          vertical-align: middle;
          padding-right: 10px;
      }
      span{
         vertical-align: middle;
      }
  }
  .span_btn {
      margin-left: 10px;
  }          
  

}

</style>
